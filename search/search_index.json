{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"d-gitea \u00b6 Docker files for running gitea documentation: d-gitea container (you are here) source code on git.charlesreid1.com: d-gitea source code on github.com: charlesreid1-docker/d-gitea gitea documentation - running gitea with docker Table of Contents \u00b6 secrets app.ini file jinja templates container directory structure container data volume git repositories files mounted into container using the docker-compose.yml file notes on custom files configuring gitea with app.ini customizing gitea with custom files backing up and restoring gitea Secrets \u00b6 There are two secrets that must be set in the Gitea configuration file: the internal token and the secret key. The two secret values can be placed in two *.secret files: internal_token.secret secret_key.secret The contents should be the value of the secret variable you wish to use in custom/conf/app.ini . These files are not tracked by git. Jinja Templates \u00b6 The app.ini script is not stored directly in this repo, since it contains sensitive information. Instead, we store a Jinja template, app.ini.j2 , which is rendered into a real app.ini file after variable substitutions, etc. Normally, we use this repo with Ansible, so we don't deal with the Jinja template ourselves. If you want to render the Jinja template into a real config file without using Ansible, use the make_app_ini.sh script: $ ./make_app_ini.sh (This requires the two secret files mentioned above to be present.) Container Directory Structure \u00b6 The custom/ dir in this folder maps to the /data/gitea volume inside the gitea container. For example, the app.ini configuration file will be mapped into the container at /data/gitea/conf/app.ini . Container Data Volume \u00b6 This container expects to use a docker data volume to store the gitea custom configuration and the entire contents of all repositories. On the host machine, you can access named data volumes at /var/lib/docker/volumes/gitea_gitea/_data or copy files in and out of the container using docker cp . Git Repositories \u00b6 directory structure before adding repos to gitea \u00b6 Directory structure for host-mounted gitea directory before any repositories have been added to gitea: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 11 directories, 7 files directory structure after adding repos to gitea \u00b6 After adding a repository: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u2502 \u2514\u2500e charlesreid1 \u2502 \u2514\u2500\u2500 oieruoweiur.git \u2502 \u251c\u2500\u2500 branches \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 HEAD \u2502 \u251c\u2500\u2500 hooks \u2502 \u2502 \u251c\u2500\u2500 applypatch-msg.sample \u2502 \u2502 \u251c\u2500\u2500 commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 post-receive \u2502 \u2502 \u251c\u2500\u2500 post-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 post-update.sample \u2502 \u2502 \u251c\u2500\u2500 pre-applypatch.sample \u2502 \u2502 \u251c\u2500\u2500 pre-commit.sample \u2502 \u2502 \u251c\u2500\u2500 prepare-commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 pre-push.sample \u2502 \u2502 \u251c\u2500\u2500 pre-rebase.sample \u2502 \u2502 \u251c\u2500\u2500 pre-receive \u2502 \u2502 \u251c\u2500\u2500 pre-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 pre-receive.sample \u2502 \u2502 \u251c\u2500\u2500 update \u2502 \u2502 \u251c\u2500\u2500 update.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u2514\u2500\u2500 update.sample \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u251c\u2500\u2500 exclude \u2502 \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 objects \u2502 \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u2502 \u2514\u2500\u2500 packs \u2502 \u2502 \u2514\u2500\u2500 pack \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 heads \u2502 \u2514\u2500\u2500 tags \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 25 directories, 29 files Backing up git repositories \u00b6 Backing up git repositories associated with the gitea instance is a separate step from gitea dump (see above). Before backing up repositories, perform a gitea dump without the repositories included. All git repositories are stored in /data/git/repositories/ . They are stored in the subdirectory org-name/repo-name . To back up all repositories, copy the folder /data/git/repositories from the gitea container. To restore all repositories, copy the folder /data/git/repositories into the gitea container. Files Mounted Into Container \u00b6 The d-gitea/custom/ directory is mounted into the container at /data/gitea . The d-gitea/data/ directory is mounted into the container at /app/gitea/data . To make the custom configuration file, follow the instructions mentioned in the \"Secrets\" section. Using the docker-compose.yml File \u00b6 Standalone \u00b6 This directory contains a docker-compose file that can be used to run a gitea server on port 3000. To get the gitea container up and running, $ docker-compose up Now visit <server-ip>:3000 . You will be presented with a configuration page. Set up the gitea instance. This will automatically populate the directory structure. See below for more info. Use this as a project seed to add gitea containers to other docker pods. pod-charlesreid1 \u00b6 The main use of this repo is as a submodule in pod-charlesreid1 . This pod is set up by Ansible, which integrates well with the Jinja template approach. Notes on Custom Files \u00b6 The settings in the app.ini file are documented here . An extensive sample app.ini file is here (WARNING: this broke gitea). The existing gitea templates are in the gitea repo under templates/ . These can be modified as needed and placed in the custom/templates/ directory. custom templates directory \u00b6 The templates directory d-gitea/custom/templates contains template files. These are gitea templates that control how particular kinds of gitea pages look. For example, a template can be used to modify how the user page looks, or modify the layout of repository main pages. In the container, this will be at /data/gitea/templates/ . custom gitea pages \u00b6 The custom pages directory d-gitea/custom/pages contains one-off pages or static content that is hosted by the gitea instance, but not necessarily incorporated into the gitea site. For example, a custom \"about me\" page could be added as a static .html file, and it would be hosted at git.charlesreid1.com/about . In the container, this will be at /data/gitea/pages/ . Backing up and restoring gitea \u00b6 Running gitea dump command will dump files required for restoring an existing Gitea instance. Unfortunately, gitea's backup and restore functionality is an absolute dumpster fire. We do our best to walk through the process, but here is a summary: * On the old system: * Create a backup file gitea-dump.zip using the very specific gitea dump incantation that works * Move the backup file out of the gitea container * On the new system: * Unzip the backup file gitea-dump.zip * Put appropriate files in appropriate location * Use the table below to determine where in the repo the gitea dump files should go, and where they will be available inside the gitea container Creating a Backup \u00b6 To create a gitea dump, connect to the docker container and get a bash shell as the user git via the docker exec command: # connect to gitea container docker exec -it --user git name_of_gitea_container /bin/bash This will give you a bash shell as the user git . Now create a gitea dump file (the gitea dump command requires you to be in /app/gitea , this assumes that the gitea executable is at the default location of /app/gitea/gitea ): # necessary cd /app/gitea # create gitea dump /app/gitea/gitea dump --file gitea-dump.zip --skip-repository IMPORTANT: The --skip-repositories flag means we are making the gitea dump way, way, way smaller, but it also means we need to back up and restore the repositories folder ourselves! (See below for instructions.) Now copy the file out of the container, then remove it from the container: # copy gitea dump out of container docker cp name_of_gitea_container:/app/gitea/gitea-dump.zip . # remove gitea dump docker exec -it name_of_gitea_container rm /app/gitea/gitea-dump.zip Contents of Dump File \u00b6 When the gitea dump file is unzipped, it will create the following files: app.ini custom/ directory log/ directory (useless duplicate, already contained in custom/ dir) data/ directory These files should map to the following locations in the docker container running the live gitea instance: gitea dump file: gitea live instance: ---------------- -------------------- app.ini /data/gitea/conf/app.ini custom/ /data/gitea/ log/ (useless duplicate of custom/log/) data /app/gitea/data Restoring a Backup \u00b6 To restore a backup, copy the following files from the gitea dump to the following locations inside this repository: gitea dump file: d-gitea repo location: ---------------- ---------------------- app.ini d-gitea/custom/conf/app.ini custom/* d-gitea/custom/* data d-gitea/data (If you're running pod-charlesreid1, put these files in the specified location in the d-gitea submodule.) Restoring repositories directory \u00b6 Note that when we created the gitea dump, we excluded the repositories themselves. This is because these will greatly inflate the size of our gitea dump and will make it much more difficult to store our backup files. Repository contents can be backed up separately as follows: Log in to the old server Back up the /data/git/repositories directory (copy and compress) Copy the backup to the new server Log in to the new server Mount the /data/git/repositories folder Optionally, if you want to keep the repositories folder in its own location, modify docker-compose.yml to add the following line to the gitea container's volumes configuration: services: server: image: gitea/gitea:latest ... volumes: - \"/path/to/repositories:/data/git/repositories\" ... This should make it easier to manage, back up, and restore the repositories folder. Database backups \u00b6 We opt for the SQLite backend for gitea, which means the database is kept in a flat file on disk called /data/gitea/gitea.db . The location of this file and the format of the database are specified in the config file in d-gitea/custom/conf/app.ini . This file should not be edited, instead change the Jinja template d-gitea/custom/conf/app.ini.j2 and remake app.ini from the template.","title":"Home"},{"location":"#d-gitea","text":"Docker files for running gitea documentation: d-gitea container (you are here) source code on git.charlesreid1.com: d-gitea source code on github.com: charlesreid1-docker/d-gitea gitea documentation - running gitea with docker","title":"d-gitea"},{"location":"#table-of-contents","text":"secrets app.ini file jinja templates container directory structure container data volume git repositories files mounted into container using the docker-compose.yml file notes on custom files configuring gitea with app.ini customizing gitea with custom files backing up and restoring gitea","title":"Table of Contents"},{"location":"#secrets","text":"There are two secrets that must be set in the Gitea configuration file: the internal token and the secret key. The two secret values can be placed in two *.secret files: internal_token.secret secret_key.secret The contents should be the value of the secret variable you wish to use in custom/conf/app.ini . These files are not tracked by git.","title":"Secrets"},{"location":"#jinja-templates","text":"The app.ini script is not stored directly in this repo, since it contains sensitive information. Instead, we store a Jinja template, app.ini.j2 , which is rendered into a real app.ini file after variable substitutions, etc. Normally, we use this repo with Ansible, so we don't deal with the Jinja template ourselves. If you want to render the Jinja template into a real config file without using Ansible, use the make_app_ini.sh script: $ ./make_app_ini.sh (This requires the two secret files mentioned above to be present.)","title":"Jinja Templates"},{"location":"#container-directory-structure","text":"The custom/ dir in this folder maps to the /data/gitea volume inside the gitea container. For example, the app.ini configuration file will be mapped into the container at /data/gitea/conf/app.ini .","title":"Container Directory Structure"},{"location":"#container-data-volume","text":"This container expects to use a docker data volume to store the gitea custom configuration and the entire contents of all repositories. On the host machine, you can access named data volumes at /var/lib/docker/volumes/gitea_gitea/_data or copy files in and out of the container using docker cp .","title":"Container Data Volume"},{"location":"#git-repositories","text":"","title":"Git Repositories"},{"location":"#directory-structure-before-adding-repos-to-gitea","text":"Directory structure for host-mounted gitea directory before any repositories have been added to gitea: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 11 directories, 7 files","title":"directory structure before adding repos to gitea"},{"location":"#directory-structure-after-adding-repos-to-gitea","text":"After adding a repository: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u2502 \u2514\u2500e charlesreid1 \u2502 \u2514\u2500\u2500 oieruoweiur.git \u2502 \u251c\u2500\u2500 branches \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 HEAD \u2502 \u251c\u2500\u2500 hooks \u2502 \u2502 \u251c\u2500\u2500 applypatch-msg.sample \u2502 \u2502 \u251c\u2500\u2500 commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 post-receive \u2502 \u2502 \u251c\u2500\u2500 post-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 post-update.sample \u2502 \u2502 \u251c\u2500\u2500 pre-applypatch.sample \u2502 \u2502 \u251c\u2500\u2500 pre-commit.sample \u2502 \u2502 \u251c\u2500\u2500 prepare-commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 pre-push.sample \u2502 \u2502 \u251c\u2500\u2500 pre-rebase.sample \u2502 \u2502 \u251c\u2500\u2500 pre-receive \u2502 \u2502 \u251c\u2500\u2500 pre-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 pre-receive.sample \u2502 \u2502 \u251c\u2500\u2500 update \u2502 \u2502 \u251c\u2500\u2500 update.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u2514\u2500\u2500 update.sample \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u251c\u2500\u2500 exclude \u2502 \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 objects \u2502 \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u2502 \u2514\u2500\u2500 packs \u2502 \u2502 \u2514\u2500\u2500 pack \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 heads \u2502 \u2514\u2500\u2500 tags \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 25 directories, 29 files","title":"directory structure after adding repos to gitea"},{"location":"#backing-up-git-repositories","text":"Backing up git repositories associated with the gitea instance is a separate step from gitea dump (see above). Before backing up repositories, perform a gitea dump without the repositories included. All git repositories are stored in /data/git/repositories/ . They are stored in the subdirectory org-name/repo-name . To back up all repositories, copy the folder /data/git/repositories from the gitea container. To restore all repositories, copy the folder /data/git/repositories into the gitea container.","title":"Backing up git repositories"},{"location":"#files-mounted-into-container","text":"The d-gitea/custom/ directory is mounted into the container at /data/gitea . The d-gitea/data/ directory is mounted into the container at /app/gitea/data . To make the custom configuration file, follow the instructions mentioned in the \"Secrets\" section.","title":"Files Mounted Into Container"},{"location":"#using-the-docker-composeyml-file","text":"","title":"Using the docker-compose.yml File"},{"location":"#standalone","text":"This directory contains a docker-compose file that can be used to run a gitea server on port 3000. To get the gitea container up and running, $ docker-compose up Now visit <server-ip>:3000 . You will be presented with a configuration page. Set up the gitea instance. This will automatically populate the directory structure. See below for more info. Use this as a project seed to add gitea containers to other docker pods.","title":"Standalone"},{"location":"#pod-charlesreid1","text":"The main use of this repo is as a submodule in pod-charlesreid1 . This pod is set up by Ansible, which integrates well with the Jinja template approach.","title":"pod-charlesreid1"},{"location":"#notes-on-custom-files","text":"The settings in the app.ini file are documented here . An extensive sample app.ini file is here (WARNING: this broke gitea). The existing gitea templates are in the gitea repo under templates/ . These can be modified as needed and placed in the custom/templates/ directory.","title":"Notes on Custom Files"},{"location":"#custom-templates-directory","text":"The templates directory d-gitea/custom/templates contains template files. These are gitea templates that control how particular kinds of gitea pages look. For example, a template can be used to modify how the user page looks, or modify the layout of repository main pages. In the container, this will be at /data/gitea/templates/ .","title":"custom templates directory"},{"location":"#custom-gitea-pages","text":"The custom pages directory d-gitea/custom/pages contains one-off pages or static content that is hosted by the gitea instance, but not necessarily incorporated into the gitea site. For example, a custom \"about me\" page could be added as a static .html file, and it would be hosted at git.charlesreid1.com/about . In the container, this will be at /data/gitea/pages/ .","title":"custom gitea pages"},{"location":"#backing-up-and-restoring-gitea","text":"Running gitea dump command will dump files required for restoring an existing Gitea instance. Unfortunately, gitea's backup and restore functionality is an absolute dumpster fire. We do our best to walk through the process, but here is a summary: * On the old system: * Create a backup file gitea-dump.zip using the very specific gitea dump incantation that works * Move the backup file out of the gitea container * On the new system: * Unzip the backup file gitea-dump.zip * Put appropriate files in appropriate location * Use the table below to determine where in the repo the gitea dump files should go, and where they will be available inside the gitea container","title":"Backing up and restoring gitea"},{"location":"#creating-a-backup","text":"To create a gitea dump, connect to the docker container and get a bash shell as the user git via the docker exec command: # connect to gitea container docker exec -it --user git name_of_gitea_container /bin/bash This will give you a bash shell as the user git . Now create a gitea dump file (the gitea dump command requires you to be in /app/gitea , this assumes that the gitea executable is at the default location of /app/gitea/gitea ): # necessary cd /app/gitea # create gitea dump /app/gitea/gitea dump --file gitea-dump.zip --skip-repository IMPORTANT: The --skip-repositories flag means we are making the gitea dump way, way, way smaller, but it also means we need to back up and restore the repositories folder ourselves! (See below for instructions.) Now copy the file out of the container, then remove it from the container: # copy gitea dump out of container docker cp name_of_gitea_container:/app/gitea/gitea-dump.zip . # remove gitea dump docker exec -it name_of_gitea_container rm /app/gitea/gitea-dump.zip","title":"Creating a Backup"},{"location":"#contents-of-dump-file","text":"When the gitea dump file is unzipped, it will create the following files: app.ini custom/ directory log/ directory (useless duplicate, already contained in custom/ dir) data/ directory These files should map to the following locations in the docker container running the live gitea instance: gitea dump file: gitea live instance: ---------------- -------------------- app.ini /data/gitea/conf/app.ini custom/ /data/gitea/ log/ (useless duplicate of custom/log/) data /app/gitea/data","title":"Contents of Dump File"},{"location":"#restoring-a-backup","text":"To restore a backup, copy the following files from the gitea dump to the following locations inside this repository: gitea dump file: d-gitea repo location: ---------------- ---------------------- app.ini d-gitea/custom/conf/app.ini custom/* d-gitea/custom/* data d-gitea/data (If you're running pod-charlesreid1, put these files in the specified location in the d-gitea submodule.)","title":"Restoring a Backup"},{"location":"#restoring-repositories-directory","text":"Note that when we created the gitea dump, we excluded the repositories themselves. This is because these will greatly inflate the size of our gitea dump and will make it much more difficult to store our backup files. Repository contents can be backed up separately as follows: Log in to the old server Back up the /data/git/repositories directory (copy and compress) Copy the backup to the new server Log in to the new server Mount the /data/git/repositories folder Optionally, if you want to keep the repositories folder in its own location, modify docker-compose.yml to add the following line to the gitea container's volumes configuration: services: server: image: gitea/gitea:latest ... volumes: - \"/path/to/repositories:/data/git/repositories\" ... This should make it easier to manage, back up, and restore the repositories folder.","title":"Restoring repositories directory"},{"location":"#database-backups","text":"We opt for the SQLite backend for gitea, which means the database is kept in a flat file on disk called /data/gitea/gitea.db . The location of this file and the format of the database are specified in the config file in d-gitea/custom/conf/app.ini . This file should not be edited, instead change the Jinja template d-gitea/custom/conf/app.ini.j2 and remake app.ini from the template.","title":"Database backups"}]}